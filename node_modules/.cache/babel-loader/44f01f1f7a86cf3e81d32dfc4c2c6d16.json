{"ast":null,"code":"import _regeneratorRuntime from\"/home/colis_cheng/access-to-justice/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/colis_cheng/access-to-justice/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/home/colis_cheng/access-to-justice/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from\"react\";import{useAuth0}from\"@auth0/auth0-react\";import LoginButton from\"./LoginButton\";import LogoutButton from\"../../../dashboards/LogoutButton\";// Wrapper component for the LoginButton.js component\nimport{jsx as _jsx}from\"react/jsx-runtime\";var AuthNav=function AuthNav(){var _useAuth=useAuth0(),isAuthenticated=_useAuth.isAuthenticated,user=_useAuth.user,getAccessTokenSilently=_useAuth.getAccessTokenSilently;var domain=process.env.REACT_APP_AUTH0_DOMAIN;var _useState=useState({}),_useState2=_slicedToArray(_useState,2),role=_useState2[0],setRole=_useState2[1];// this useEffect hook is where we are able to extract the role from app_metadata when a user\n// has been verified by auth0. We then receive the user role and redirect users accordingly\nuseEffect(function(){var getUserMetadata=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:try{getAccessTokenSilently({audience:\"https://\".concat(domain,\"/api/v2/\"),scope:\"read:current_user\"}).then(function(accessToken){var userDetailsByIdUrl=\"https://\".concat(domain,\"/api/v2/users/\").concat(user.sub);fetch(userDetailsByIdUrl,{headers:{Authorization:\"Bearer \".concat(accessToken)}}).then(function(metadataResponse){metadataResponse.json().then(function(result){setRole(result.app_metadata.role);localStorage.setItem(\"role\",result.app_metadata.role);var roleString=String(role);if(roleString===\"advocate\"){window.location.href=\"\".concat(window.location.origin,\"/advocate\");}if(roleString===\"a2j\"){window.location.href=\"\".concat(window.location.origin,\"/a2j\");}});});}).catch(function(e){console.log(e);});}catch(e){console.log(e);}case 1:case\"end\":return _context.stop();}}},_callee);}));return function getUserMetadata(){return _ref.apply(this,arguments);};}();if(user){getUserMetadata();}},[domain,getAccessTokenSilently,user,role]);return/*#__PURE__*/_jsx(\"div\",{children:isAuthenticated?/*#__PURE__*/_jsx(LogoutButton,{}):/*#__PURE__*/_jsx(LoginButton,{})});};var LoginForm=function LoginForm(){return/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"form\",{className:\"ui form\",style:{top:\"28vh\",left:\"5vw\"},children:/*#__PURE__*/_jsx(AuthNav,{})})});};export default LoginForm;","map":{"version":3,"sources":["/home/colis_cheng/access-to-justice/src/login/components/LeftPanel/LoginForm.js"],"names":["React","useEffect","useState","useAuth0","LoginButton","LogoutButton","AuthNav","isAuthenticated","user","getAccessTokenSilently","domain","process","env","REACT_APP_AUTH0_DOMAIN","role","setRole","getUserMetadata","audience","scope","then","accessToken","userDetailsByIdUrl","sub","fetch","headers","Authorization","metadataResponse","json","result","app_metadata","localStorage","setItem","roleString","String","window","location","href","origin","catch","e","console","log","LoginForm","top","left"],"mappings":"2cAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,QAA3B,KAA2C,OAA3C,CACA,OAASC,QAAT,KAAyB,oBAAzB,CACA,MAAOC,CAAAA,WAAP,KAAwB,eAAxB,CACA,MAAOC,CAAAA,YAAP,KAAyB,kCAAzB,CAEA;2CACA,GAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,EAAM,CACpB,aAA0DH,QAAQ,EAAlE,CAAQI,eAAR,UAAQA,eAAR,CAAyBC,IAAzB,UAAyBA,IAAzB,CAA+BC,sBAA/B,UAA+BA,sBAA/B,CAEA,GAAMC,CAAAA,MAAM,CAAGC,OAAO,CAACC,GAAR,CAAYC,sBAA3B,CAEA,cAAwBX,QAAQ,CAAC,EAAD,CAAhC,wCAAOY,IAAP,eAAaC,OAAb,eAEA;AACA;AACAd,SAAS,CAAC,UAAM,CACd,GAAMe,CAAAA,eAAe,0FAAG,mIACtB,GAAI,CACFP,sBAAsB,CAAC,CACrBQ,QAAQ,mBAAaP,MAAb,YADa,CAErBQ,KAAK,CAAE,mBAFc,CAAD,CAAtB,CAIGC,IAJH,CAIQ,SAACC,WAAD,CAAiB,CACrB,GAAMC,CAAAA,kBAAkB,mBAAcX,MAAd,0BAAqCF,IAAI,CAACc,GAA1C,CAAxB,CAEAC,KAAK,CAACF,kBAAD,CAAqB,CACxBG,OAAO,CAAE,CACPC,aAAa,kBAAYL,WAAZ,CADN,CADe,CAArB,CAAL,CAIGD,IAJH,CAIQ,SAACO,gBAAD,CAAsB,CAC5BA,gBAAgB,CAACC,IAAjB,GAAwBR,IAAxB,CAA6B,SAACS,MAAD,CAAY,CACvCb,OAAO,CAACa,MAAM,CAACC,YAAP,CAAoBf,IAArB,CAAP,CACAgB,YAAY,CAACC,OAAb,CAAqB,MAArB,CAA6BH,MAAM,CAACC,YAAP,CAAoBf,IAAjD,EACA,GAAMkB,CAAAA,UAAU,CAAGC,MAAM,CAACnB,IAAD,CAAzB,CACA,GAAIkB,UAAU,GAAK,UAAnB,CAA+B,CAC7BE,MAAM,CAACC,QAAP,CAAgBC,IAAhB,WAA0BF,MAAM,CAACC,QAAP,CAAgBE,MAA1C,cACD,CACD,GAAIL,UAAU,GAAK,KAAnB,CAA0B,CACxBE,MAAM,CAACC,QAAP,CAAgBC,IAAhB,WAA0BF,MAAM,CAACC,QAAP,CAAgBE,MAA1C,SACD,CACF,CAVD,EAWD,CAhBD,EAiBD,CAxBH,EAyBGC,KAzBH,CAyBS,SAACC,CAAD,CAAO,CACZC,OAAO,CAACC,GAAR,CAAYF,CAAZ,EACD,CA3BH,EA4BD,CAAC,MAAOA,CAAP,CAAU,CACVC,OAAO,CAACC,GAAR,CAAYF,CAAZ,EACD,CAhCqB,sDAAH,kBAAfvB,CAAAA,eAAe,0CAArB,CAkCA,GAAIR,IAAJ,CAAU,CACRQ,eAAe,GAChB,CACF,CAtCQ,CAsCN,CAACN,MAAD,CAASD,sBAAT,CAAiCD,IAAjC,CAAuCM,IAAvC,CAtCM,CAAT,CAwCA,mBAAO,qBAAMP,eAAe,cAAG,KAAC,YAAD,IAAH,cAAsB,KAAC,WAAD,IAA3C,EAAP,CACD,CAlDD,CAoDA,GAAMmC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,EAAM,CACtB,mBACE,kCACE,aAAM,SAAS,CAAC,SAAhB,CAA0B,KAAK,CAAE,CAAEC,GAAG,CAAE,MAAP,CAAeC,IAAI,CAAE,KAArB,CAAjC,uBACE,KAAC,OAAD,IADF,EADF,EADF,CAOD,CARD,CAUA,cAAeF,CAAAA,SAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useAuth0 } from \"@auth0/auth0-react\";\r\nimport LoginButton from \"./LoginButton\";\r\nimport LogoutButton from \"../../../dashboards/LogoutButton\";\r\n\r\n// Wrapper component for the LoginButton.js component\r\nconst AuthNav = () => {\r\n  const { isAuthenticated, user, getAccessTokenSilently } = useAuth0();\r\n\r\n  const domain = process.env.REACT_APP_AUTH0_DOMAIN;\r\n\r\n  const [role, setRole] = useState({});\r\n\r\n  // this useEffect hook is where we are able to extract the role from app_metadata when a user\r\n  // has been verified by auth0. We then receive the user role and redirect users accordingly\r\n  useEffect(() => {\r\n    const getUserMetadata = async () => {\r\n      try {\r\n        getAccessTokenSilently({\r\n          audience: `https://${domain}/api/v2/`,\r\n          scope: \"read:current_user\",\r\n        })\r\n          .then((accessToken) => {\r\n            const userDetailsByIdUrl = `https://${domain}/api/v2/users/${user.sub}`;\r\n\r\n            fetch(userDetailsByIdUrl, {\r\n              headers: {\r\n                Authorization: `Bearer ${accessToken}`,\r\n              },\r\n            }).then((metadataResponse) => {\r\n              metadataResponse.json().then((result) => {\r\n                setRole(result.app_metadata.role);\r\n                localStorage.setItem(\"role\", result.app_metadata.role);\r\n                const roleString = String(role);\r\n                if (roleString === \"advocate\") {\r\n                  window.location.href = `${window.location.origin}/advocate`;\r\n                }\r\n                if (roleString === \"a2j\") {\r\n                  window.location.href = `${window.location.origin}/a2j`;\r\n                }\r\n              });\r\n            });\r\n          })\r\n          .catch((e) => {\r\n            console.log(e);\r\n          });\r\n      } catch (e) {\r\n        console.log(e);\r\n      }\r\n    };\r\n    if (user) {\r\n      getUserMetadata();\r\n    }\r\n  }, [domain, getAccessTokenSilently, user, role]);\r\n\r\n  return <div>{isAuthenticated ? <LogoutButton /> : <LoginButton />}</div>;\r\n};\r\n\r\nconst LoginForm = () => {\r\n  return (\r\n    <div>\r\n      <form className=\"ui form\" style={{ top: \"28vh\", left: \"5vw\" }}>\r\n        <AuthNav />\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoginForm;\r\n"]},"metadata":{},"sourceType":"module"}